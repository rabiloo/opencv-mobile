name: release
#on: [push, pull_request]
on:
  push:
    tags:
      - '*'

# env:
  # EMSCRIPTEN_VERSION: 2.0.8

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  android-opencv3-ndk25_2:
    runs-on: ubuntu-22.04
    env:
      OPENCV_VERSION: 3.4.18
      PACKAGENAME: opencv-mobile-3.4.18-android-ndk25.2
    steps:
    - uses: actions/checkout@v3
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.18-no-rtti.patch
        patch -p1 -i ../opencv-3.4.18-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/apk
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip
  
  android-opencv3-ndk24_0:
    runs-on: ubuntu-22.04
    env:
      OPENCV_VERSION: 3.4.18
      PACKAGENAME: opencv-mobile-3.4.18-android-ndk24.0
      ANDROID_NDK: /usr/local/lib/android/sdk/ndk/24.0.8215888
      ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/24.0.8215888
      ANDROID_NDK_LATEST_HOME: /usr/local/lib/android/sdk/ndk/24.0.8215888
      ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk/24.0.8215888
    steps:
    - uses: actions/checkout@v3
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.18-no-rtti.patch
        patch -p1 -i ../opencv-3.4.18-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/apk
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  android-opencv3-ndk23_2:
    runs-on: ubuntu-22.04
    env:
      OPENCV_VERSION: 3.4.18
      PACKAGENAME: opencv-mobile-3.4.18-android-ndk23.2
      ANDROID_NDK: /usr/local/lib/android/sdk/ndk/23.2.8568313
      ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/23.2.8568313
      ANDROID_NDK_LATEST_HOME: /usr/local/lib/android/sdk/ndk/23.2.8568313
      ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk/23.2.8568313
    steps:
    - uses: actions/checkout@v3
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-3.4.18-no-rtti.patch
        patch -p1 -i ../opencv-3.4.18-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/apk
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  # armlinux-opencv3-gcc9_5:
  #   runs-on: ubuntu-22.04
  #   env:
  #     OPENCV_VERSION: 3.4.18
  #     PACKAGENAME: opencv-mobile-3.4.18-armlinux-gcc9.5
  #   steps:
  #   - name: arm-gnu-toolchain
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

  #   - uses: actions/checkout@v3
  #   - name: opencv-source
  #     run: |
  #       wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
  #       unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
  #       patch -p1 -i ../opencv-3.4.18-no-rtti.patch
  #       patch -p1 -i ../opencv-3.4.18-no-zlib.patch
  #       rm -rf modules/highgui
  #       cp -r ../highgui modules/
  #   - name: build-arm-linux-gnueabi
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-arm-linux-gnueabihf
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-aarch64-linux-gnu
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: package
  #     run: |
  #       mkdir ${{ env.PACKAGENAME }}
  #       mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
  #       mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
  #       mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind_3rdparty.supp
  #       zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
  #   - name: upload-zip
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ${{ env.PACKAGENAME }}
  #       path: ${{ env.PACKAGENAME }}.zip
  
  # armlinux-opencv3-gcc9_4:
  #   runs-on: ubuntu-20.04
  #   env:
  #     OPENCV_VERSION: 3.4.18
  #     PACKAGENAME: opencv-mobile-3.4.18-armlinux-gcc9.4
  #   steps:
  #   - name: arm-gnu-toolchain
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

  #   - uses: actions/checkout@v3
  #   - name: opencv-source
  #     run: |
  #       wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
  #       unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
  #       patch -p1 -i ../opencv-3.4.18-no-rtti.patch
  #       patch -p1 -i ../opencv-3.4.18-no-zlib.patch
  #       rm -rf modules/highgui
  #       cp -r ../highgui modules/
  #   - name: build-arm-linux-gnueabi
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-arm-linux-gnueabihf
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-aarch64-linux-gnu
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: package
  #     run: |
  #       mkdir ${{ env.PACKAGENAME }}
  #       mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
  #       mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
  #       mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind_3rdparty.supp
  #       zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
  #   - name: upload-zip
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ${{ env.PACKAGENAME }}
  #       path: ${{ env.PACKAGENAME }}.zip

  # armlinux-opencv3-gcc7_5:
  #   runs-on: ubuntu-18.04
  #   env:
  #     OPENCV_VERSION: 3.4.18
  #     PACKAGENAME: opencv-mobile-3.4.18-armlinux-gcc7.5
  #   steps:
  #   - name: arm-gnu-toolchain
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

  #   - uses: actions/checkout@v3
  #   - name: opencv-source
  #     run: |
  #       wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
  #       unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
  #       patch -p1 -i ../opencv-3.4.18-no-rtti.patch
  #       patch -p1 -i ../opencv-3.4.18-no-zlib.patch
  #       rm -rf modules/highgui
  #       cp -r ../highgui modules/
  #   - name: build-arm-linux-gnueabi
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-arm-linux-gnueabi && cd build-arm-linux-gnueabi
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabi.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-arm-linux-gnueabihf
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-arm-linux-gnueabihf && cd build-arm-linux-gnueabihf
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/arm-linux-gnueabihf.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-aarch64-linux-gnu
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/aarch64-linux-gnu.toolchain.cmake \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
  #           -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: package
  #     run: |
  #       mkdir ${{ env.PACKAGENAME }}
  #       mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabi
  #       mkdir ${{ env.PACKAGENAME }}/arm-linux-gnueabihf
  #       mkdir ${{ env.PACKAGENAME }}/aarch64-linux-gnu
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabi/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabi/
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm-linux-gnueabihf/install/* ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGENAME }}/aarch64-linux-gnu/
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabi/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/arm-linux-gnueabihf/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/aarch64-linux-gnu/share/OpenCV/valgrind_3rdparty.supp
  #       zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
  #   - name: upload-zip
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ${{ env.PACKAGENAME }}
  #       path: ${{ env.PACKAGENAME }}.zip
  
  # ubuntu-1804-opencv3:
  #   runs-on: ubuntu-18.04
  #   env:
  #     OPENCV_VERSION: 3.4.18
  #     PACKAGENAME: opencv-mobile-3.4.18-ubuntu-1804
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: opencv-source
  #     run: |
  #       wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
  #       unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
  #       patch -p1 -i ../opencv-3.4.18-no-zlib.patch
  #       rm -rf modules/highgui
  #       cp -r ../highgui modules/
  #   - name: build
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build && cd build
  #       cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: package
  #     run: |
  #       rm -rf ${{ env.PACKAGENAME }}
  #       mkdir -p ${{ env.PACKAGENAME }}
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind_3rdparty.supp
  #       rm -f ${{ env.PACKAGENAME }}.zip
  #       zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
  #   - name: upload
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ${{ env.PACKAGENAME }}
  #       path: ${{ env.PACKAGENAME }}.zip

  # ubuntu-2004-opencv3:
  #   runs-on: ubuntu-20.04
  #   env:
  #     OPENCV_VERSION: 3.4.18
  #     PACKAGENAME: opencv-mobile-3.4.18-ubuntu-2004
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: opencv-source
  #     run: |
  #       wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
  #       unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
  #       patch -p1 -i ../opencv-3.4.18-no-zlib.patch
  #       rm -rf modules/highgui
  #       cp -r ../highgui modules/
  #   - name: build
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build && cd build
  #       cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: package
  #     run: |
  #       rm -rf ${{ env.PACKAGENAME }}
  #       mkdir -p ${{ env.PACKAGENAME }}
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind_3rdparty.supp
  #       rm -f ${{ env.PACKAGENAME }}.zip
  #       zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
  #   - name: upload
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ${{ env.PACKAGENAME }}
  #       path: ${{ env.PACKAGENAME }}.zip

  # ubuntu-2204-opencv3:
  #   runs-on: ubuntu-22.04
  #   env:
  #     OPENCV_VERSION: 3.4.18
  #     PACKAGENAME: opencv-mobile-3.4.18-ubuntu-2204
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: opencv-source
  #     run: |
  #       wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
  #       unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
  #       patch -p1 -i ../opencv-3.4.18-no-zlib.patch
  #       rm -rf modules/highgui
  #       cp -r ../highgui modules/
  #   - name: build
  #     run: |
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build && cd build
  #       cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: package
  #     run: |
  #       rm -rf ${{ env.PACKAGENAME }}
  #       mkdir -p ${{ env.PACKAGENAME }}
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install/* ${{ env.PACKAGENAME }}/
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/share/OpenCV/valgrind_3rdparty.supp
  #       rm -f ${{ env.PACKAGENAME }}.zip
  #       zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
  #   - name: upload
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ${{ env.PACKAGENAME }}
  #       path: ${{ env.PACKAGENAME }}.zip

  # webassembly-opencv3:
  #   runs-on: ubuntu-20.04
  #   env:
  #     OPENCV_VERSION: 3.4.18
  #     PACKAGENAME: opencv-mobile-3.4.18-webassembly
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: emsdk
  #     run: |
  #       git clone https://github.com/emscripten-core/emsdk.git
  #       cd emsdk
  #       ./emsdk install $EMSCRIPTEN_VERSION
  #       ./emsdk activate $EMSCRIPTEN_VERSION
  #   - name: opencv-source
  #     run: |
  #       wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
  #       unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
  #       rm -rf modules/gapi
  #       patch -p1 -i ../opencv-3.4.18-no-rtti.patch
  #       patch -p1 -i ../opencv-3.4.18-no-zlib.patch
  #       rm -rf modules/highgui
  #       cp -r ../highgui modules/
  #   - name: build
  #     run: |
  #       source emsdk/emsdk_env.sh
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       patch -p1 -i ../opencv-3.4.18-unsafe-xadd.patch
  #       mkdir build && cd build
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
  #           -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0" \
  #           -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-simd
  #     run: |
  #       source emsdk/emsdk_env.sh
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-simd && cd build-simd
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
  #           -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=0 -msimd128" \
  #           -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-threads
  #     run: |
  #       source emsdk/emsdk_env.sh
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       patch -p1 -R -i ../opencv-3.4.18-unsafe-xadd.patch
  #       mkdir build-threads && cd build-threads
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
  #           -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" \
  #           -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: build-simd-threads
  #     run: |
  #       source emsdk/emsdk_env.sh
  #       cd opencv-${{ env.OPENCV_VERSION }}
  #       mkdir build-simd-threads && cd build-simd-threads
  #       cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
  #           -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
  #           -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions -s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" \
  #           -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv3_cmake_options.txt` -DBUILD_opencv_world=OFF ..
  #       cmake --build . -j 2
  #       cmake --build . --target install
  #   - name: package
  #     run: |
  #       rm -rf ${{ env.PACKAGENAME }}
  #       mkdir -p ${{ env.PACKAGENAME }}
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build/install ${{ env.PACKAGENAME }}/basic
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-simd/install ${{ env.PACKAGENAME }}/simd
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-threads/install ${{ env.PACKAGENAME }}/threads
  #       cp -rf opencv-${{ env.OPENCV_VERSION }}/build-simd-threads/install ${{ env.PACKAGENAME }}/simd-threads
  #       rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/basic/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/simd/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/threads/share/OpenCV/valgrind_3rdparty.supp
  #       rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/haarcascades
  #       rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/lbpcascades
  #       rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/valgrind.supp
  #       rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/OpenCV/valgrind_3rdparty.supp
  #       rm -f ${{ env.PACKAGENAME }}.zip
  #       zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
  #   - name: upload
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ${{ env.PACKAGENAME }}
  #       path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, android-opencv3-ndk25_2, android-opencv3-ndk24_0, android-opencv3-ndk23_2]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-android-opencv3-ndk25_2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.18-android-ndk25.2
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-android-opencv3-ndk24_0
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.18-android-ndk24.0
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-android-opencv3-ndk23_2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-3.4.18-android-ndk23.2
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    # - name: upload-armlinux-opencv3-gcc9_5
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     PACKAGENAME: opencv-mobile-3.4.18-armlinux-gcc9.5
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
    #     asset_name: ${{ env.PACKAGENAME }}.zip
    #     asset_content_type: application/zip
    
    # - name: upload-armlinux-opencv3-gcc9_4
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     PACKAGENAME: opencv-mobile-3.4.18-armlinux-gcc9.4
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
    #     asset_name: ${{ env.PACKAGENAME }}.zip
    #     asset_content_type: application/zip
    
    # - name: upload-ubuntu-2004-opencv3
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     PACKAGENAME: opencv-mobile-3.4.18-ubuntu-2004
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
    #     asset_name: ${{ env.PACKAGENAME }}.zip
    #     asset_content_type: application/zip

    # - name: upload-ubuntu-2204-opencv3
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     PACKAGENAME: opencv-mobile-3.4.18-ubuntu-2204
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
    #     asset_name: ${{ env.PACKAGENAME }}.zip
    #     asset_content_type: application/zip

    # - name: upload-webassembly-opencv3
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     PACKAGENAME: opencv-mobile-3.4.18-webassembly
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
    #     asset_name: ${{ env.PACKAGENAME }}.zip
    #     asset_content_type: application/zip